"""in price table add enum term field, str key_price field, int quantity field, fix type price str > int

Revision ID: d645eb10f9e1
Revises: 2a78e522f406
Create Date: 2024-10-24 17:45:29.110646

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

price_term = postgresql.ENUM("day", "month", "year", name="price_term")

# revision identifiers, used by Alembic.
revision: str = "d645eb10f9e1"
down_revision: Union[str, None] = "2a78e522f406"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    price_term.create(op.get_bind(), checkfirst=False)
    op.add_column(
        "price",
        sa.Column(
            "term",
            price_term,
            nullable=False,
            comment="Вид времени",
        ),
    )
    op.add_column(
        "price",
        sa.Column(
            "key_price",
            sa.String(length=255),
            nullable=False,
            comment="Ключ для цены",
        ),
    )
    op.drop_column("price", "price")
    op.add_column(
        "price",
        sa.Column("price", sa.Integer(), nullable=False),
    )
    op.add_column("price", sa.Column("quantity", sa.Integer(), nullable=False))
    op.create_unique_constraint("unique_price_key", "price", ["key_price"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("price", "price")
    op.add_column(
        "price",
        sa.Column("price", sa.String(length=255), nullable=False),
    )
    op.drop_column("price", "key_price")
    op.drop_column("price", "term")
    op.drop_column("price", "quantity")
    price_term.drop(op.get_bind(), checkfirst=False)
    op.execute("ALTER TABLE price DROP CONSTRAINT IF EXISTS unique_price_key")
    # ### end Alembic commands ###
